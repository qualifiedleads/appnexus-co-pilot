# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-04-03 10:53
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rtb', '0168_placementstatehistory'),
    ]

    operations = [
        migrations.RunSQL("""
              DROP VIEW view_rule_unsuspend_type_report;
            """),
        migrations.RunSQL("""
              DROP VIEW view_rule_unsuspend_type_tracker;
            """),
        migrations.AlterField(
            model_name='placementstatehistory',
            name='rule_index',
            field=models.TextField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='placementstateunsuspend',
            name='rule_index',
            field=models.TextField(blank=True, db_index=True, null=True),
        ),
        migrations.RunSQL("""
                CREATE VIEW view_rule_unsuspend_type_report AS SELECT
                  unsus.campaign_id,
                  unsus.placement_id,
                  unsus.rule_id,
                  unsus.rule_index,
                  coalesce(data_grid.imps,0)-coalesce(unsus.imps,0) as impressions,
                  coalesce(data_grid.conversions,0)-coalesce(unsus.conversions,0) as conversions,
                  coalesce(data_grid.clicks,0)-coalesce(unsus.clicks,0) as clicks,
                  coalesce(data_grid.spent,0)-coalesce(unsus.spent,0) as spent,
                  CASE coalesce(data_grid.conversions-unsus.conversions,0) WHEN 0 THEN (0)::double precision
                    ELSE ((coalesce(data_grid.spent,0)-coalesce(unsus.spent,0))::double precision / (coalesce(data_grid.conversions,0)-coalesce(unsus.conversions,0))::double precision)
                  END AS cpa,
                  CASE coalesce(data_grid.imps,0)-coalesce(unsus.imps, 0) WHEN 0 THEN 0.0 ELSE ((coalesce(data_grid.conversions,0)-coalesce(unsus.conversions,0))::double precision / (coalesce(data_grid.imps,0)-coalesce(unsus.imps,0))::double precision) END AS cvr,
                  case coalesce(data_grid.clicks,0)-coalesce(unsus.clicks,0) when 0 then 0 else (coalesce(data_grid.spent,0)-coalesce(unsus.spent,0)) / (coalesce(data_grid.clicks,0)-coalesce(unsus.clicks,0)) end as cpc,
                  case coalesce(data_grid.imps,0)-coalesce(unsus.imps,0) when 0 then 0 else (coalesce(data_grid.clicks,0)-coalesce(unsus.clicks,0))::float / (coalesce(data_grid.imps,0)-coalesce(unsus.imps,0)) end as ctr,
                  kmeansecomm.good as predictionecomm,
                  kmeansleadgen.good as predictionleadgen
                FROM placement_state_unsuspend as unsus
                LEFT JOIN ui_usual_placements_grid_data_all as data_grid ON data_grid.placement_id = unsus.placement_id AND data_grid.campaign_id = unsus.campaign_id
                LEFT JOIN ( SELECT ml_placements_clusters_kmeans.placement_id,
                            ml_placements_clusters_kmeans.good
                           FROM ml_placements_clusters_kmeans
                          WHERE ((ml_placements_clusters_kmeans.day = 7) AND (ml_placements_clusters_kmeans.test_number = 2) and ml_placements_clusters_kmeans.adv_type='ecommerceAd')) kmeansecomm ON ((unsus.placement_id = kmeansecomm.placement_id))
                LEFT JOIN ( SELECT ml_placements_clusters_kmeans.placement_id,
                            ml_placements_clusters_kmeans.good
                           FROM ml_placements_clusters_kmeans
                          WHERE ((ml_placements_clusters_kmeans.day = 7) AND (ml_placements_clusters_kmeans.test_number = 2) and ml_placements_clusters_kmeans.adv_type='leadGenerationAd')) kmeansleadgen ON ((unsus.placement_id = kmeansleadgen.placement_id));
                """),
        migrations.RunSQL("""
                CREATE VIEW view_rule_unsuspend_type_tracker AS SELECT 
                unsus.campaign_id,
                unsus.placement_id,
                unsus.rule_id,
                unsus.rule_index,
                (COALESCE(data_grid.imps, 0) - COALESCE(unsus.imps, 0)) AS impressions,
                (COALESCE(data_grid.conversions, 0) - COALESCE(unsus.conversions, 0)) AS conversions,
                (COALESCE(data_grid.clicks, 0) - COALESCE(unsus.clicks, 0)) AS clicks,
                (COALESCE(data_grid.spent, (0)::numeric) - COALESCE(unsus.spent, (0)::numeric)) AS spent,
                    CASE COALESCE((data_grid.conversions - unsus.conversions), 0)
                        WHEN 0 THEN (0)::double precision
                        ELSE (((COALESCE(data_grid.spent, (0)::numeric) - COALESCE(unsus.spent, (0)::numeric)))::double precision / ((COALESCE(data_grid.conversions, 0) - COALESCE(unsus.conversions, 0)))::double precision)
                    END AS cpa,
                    CASE (COALESCE(data_grid.imps, 0) - COALESCE(unsus.imps, 0))
                        WHEN 0 THEN (0.0)::double precision
                        ELSE (((COALESCE(data_grid.conversions, 0) - COALESCE(unsus.conversions, 0)))::double precision / ((COALESCE(data_grid.imps, 0) - COALESCE(unsus.imps, 0)))::double precision)
                    END AS cvr,
                    CASE (COALESCE(data_grid.clicks, 0) - COALESCE(unsus.clicks, 0))
                        WHEN 0 THEN (0)::numeric
                        ELSE ((COALESCE(data_grid.spent, (0)::numeric) - COALESCE(unsus.spent, (0)::numeric)) / ((COALESCE(data_grid.clicks, 0) - COALESCE(unsus.clicks, 0)))::numeric)
                    END AS cpc,
                    CASE (COALESCE(data_grid.imps, 0) - COALESCE(unsus.imps, 0))
                        WHEN 0 THEN (0)::double precision
                        ELSE (((COALESCE(data_grid.clicks, 0) - COALESCE(unsus.clicks, 0)))::double precision / ((COALESCE(data_grid.imps, 0) - COALESCE(unsus.imps, 0)))::double precision)
                    END AS ctr,
                kmeansecomm.good AS predictionecomm,
                kmeansleadgen.good AS predictionleadgen
               FROM (((placement_state_unsuspend unsus
                 LEFT JOIN ui_usual_placements_grid_data_all_tracker data_grid ON (((data_grid.placement_id = unsus.placement_id) AND (data_grid.campaign_id = unsus.campaign_id))))
                 LEFT JOIN ( SELECT ml_placements_clusters_kmeans.placement_id,
                        ml_placements_clusters_kmeans.good
                       FROM ml_placements_clusters_kmeans
                      WHERE ((ml_placements_clusters_kmeans.day = 7) AND (ml_placements_clusters_kmeans.test_number = 2) AND (ml_placements_clusters_kmeans.adv_type = 'ecommerceAd'::text))) kmeansecomm ON ((unsus.placement_id = kmeansecomm.placement_id)))
                 LEFT JOIN ( SELECT ml_placements_clusters_kmeans.placement_id,
                        ml_placements_clusters_kmeans.good
                       FROM ml_placements_clusters_kmeans
                      WHERE ((ml_placements_clusters_kmeans.day = 7) AND (ml_placements_clusters_kmeans.test_number = 2) AND (ml_placements_clusters_kmeans.adv_type = 'leadGenerationAd'::text))) kmeansleadgen ON ((unsus.placement_id = kmeansleadgen.placement_id)));
               """),
    ]

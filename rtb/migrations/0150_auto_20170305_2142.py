# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-03-05 21:42
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('rtb', '0149_auto_20170304_2325'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddataall',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatacurmonth',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatacurmonth',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast14days',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast14days',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast21days',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast21days',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast3days',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast3days',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast7days',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast7days',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast90days',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalast90days',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalastmonth',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatalastmonth',
            name='window_start_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatayesterday',
            name='evaluation_date',
        ),
        migrations.RemoveField(
            model_name='uiusualcampaignsgriddatayesterday',
            name='window_start_date',
        ),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_all"),

        migrations.RunSQL("""
insert into ui_usual_campaigns_grid_data_all as ut (
    campaign_id,
    imps,
    clicks,
    spent,
    conversions,
    imps_viewed,
    view_measured_imps,
    cpm,
    cvr,
    ctr,
    cpc,
    view_measurement_rate,
    view_rate,
    day_chart)
  select
    page.campaign_id,
    page.imps,
    page.clicks,
    page.spent,
    page.conversions,
    page.imps_viewed,
    page.view_measured_imps,
    case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
    case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
    case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
    case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
    case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
    case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
    array_to_json(array((select
           json_build_object(
           'day', site_r.day,
           'imp', SUM(site_r.imps),
           'spend', SUM(site_r.media_cost),
           'clicks', SUM(site_r.clicks),
           'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
           'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
           'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
           'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
         from site_domain_performance_report site_r
         where site_r.campaign_id=page.campaign_id
           and ((site_r.hour >= '1970-01-01 00:00:00' and site_r.hour < current_timestamp::timestamp without time zone)
           or (site_r.day >= '1970-01-01 00:00:00' and site_r.day < current_timestamp::timestamp without time zone))
         group by site_r.campaign_id, site_r.day
         order by site_r.day))) id
from (
      select distinct on (site_r1.campaign_id)
        site_r1.campaign_id,
        SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
        SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
        SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
        (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
        SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
        SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
      from
        site_domain_performance_report site_r1
      where
        (site_r1.hour >= '1970-01-01 00:00:00'
        and site_r1.hour < current_timestamp::timestamp without time zone)
        or
        (site_r1.day >= '1970-01-01 00:00:00'
        and site_r1.day < current_timestamp::timestamp without time zone)
      WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
     ) page;
        """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_yesterday"),

        migrations.RunSQL("""
    insert into ui_usual_campaigns_grid_data_yesterday as ut (
        campaign_id,
        imps,
        clicks,
        spent,
        conversions,
        imps_viewed,
        view_measured_imps,
        cpm,
        cvr,
        ctr,
        cpc,
        view_measurement_rate,
        view_rate,
        day_chart)
      select
        page.campaign_id,
        page.imps,
        page.clicks,
        page.spent,
        page.conversions,
        page.imps_viewed,
        page.view_measured_imps,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
        array_to_json(array((select
               json_build_object(
               'day', site_r.day,
               'imp', SUM(site_r.imps),
               'spend', SUM(site_r.media_cost),
               'clicks', SUM(site_r.clicks),
               'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
               'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
               'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
               'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
             from site_domain_performance_report site_r
             where site_r.campaign_id=page.campaign_id
               and (
               (site_r.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '1 day')
               and site_r.hour <= current_timestamp::timestamp without time zone)
               or (
               site_r.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '1 day')
               and site_r.day <= current_timestamp::timestamp without time zone))
             group by site_r.campaign_id, site_r.day
             order by site_r.day))) id
    from (
          select distinct on (site_r1.campaign_id)
            site_r1.campaign_id,
            SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
            SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
            SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
            (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
            SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
            SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
          from
            site_domain_performance_report site_r1
          where
            (site_r1.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '1 day')
            and site_r1.hour <= current_timestamp::timestamp without time zone)
            or
            (site_r1.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '1 day')
            and site_r1.day <= current_timestamp::timestamp without time zone)
          WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
         ) page;
            """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_last_3_days"),

        migrations.RunSQL("""
    insert into ui_usual_campaigns_grid_data_last_3_days as ut (
        campaign_id,
        imps,
        clicks,
        spent,
        conversions,
        imps_viewed,
        view_measured_imps,
        cpm,
        cvr,
        ctr,
        cpc,
        view_measurement_rate,
        view_rate,
        day_chart)
      select
        page.campaign_id,
        page.imps,
        page.clicks,
        page.spent,
        page.conversions,
        page.imps_viewed,
        page.view_measured_imps,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
        array_to_json(array((select
               json_build_object(
               'day', site_r.day,
               'imp', SUM(site_r.imps),
               'spend', SUM(site_r.media_cost),
               'clicks', SUM(site_r.clicks),
               'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
               'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
               'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
               'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
             from site_domain_performance_report site_r
             where site_r.campaign_id=page.campaign_id
               and (
               (site_r.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '3 day')
               and site_r.hour <= current_timestamp::timestamp without time zone)
               or (
               site_r.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '3 day')
               and site_r.day <= current_timestamp::timestamp without time zone))
             group by site_r.campaign_id, site_r.day
             order by site_r.day))) id
    from (
          select distinct on (site_r1.campaign_id)
            site_r1.campaign_id,
            SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
            SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
            SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
            (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
            SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
            SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
          from
            site_domain_performance_report site_r1
          where
            (site_r1.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '3 day')
            and site_r1.hour <= current_timestamp::timestamp without time zone)
            or
            (site_r1.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '3 day')
            and site_r1.day <= current_timestamp::timestamp without time zone)
          WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
         ) page;
            """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_last_7_days"),

        migrations.RunSQL("""
    insert into ui_usual_campaigns_grid_data_last_7_days as ut (
        campaign_id,
        imps,
        clicks,
        spent,
        conversions,
        imps_viewed,
        view_measured_imps,
        cpm,
        cvr,
        ctr,
        cpc,
        view_measurement_rate,
        view_rate,
        day_chart)
      select
        page.campaign_id,
        page.imps,
        page.clicks,
        page.spent,
        page.conversions,
        page.imps_viewed,
        page.view_measured_imps,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
        array_to_json(array((select
               json_build_object(
               'day', site_r.day,
               'imp', SUM(site_r.imps),
               'spend', SUM(site_r.media_cost),
               'clicks', SUM(site_r.clicks),
               'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
               'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
               'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
               'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
             from site_domain_performance_report site_r
             where site_r.campaign_id=page.campaign_id
               and (
               (site_r.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '7 day')
               and site_r.hour <= current_timestamp::timestamp without time zone)
               or (
               site_r.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '7 day')
               and site_r.day <= current_timestamp::timestamp without time zone))
             group by site_r.campaign_id, site_r.day
             order by site_r.day))) id
    from (
          select distinct on (site_r1.campaign_id)
            site_r1.campaign_id,
            SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
            SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
            SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
            (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
            SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
            SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
          from
            site_domain_performance_report site_r1
          where
            (site_r1.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '7 day')
            and site_r1.hour <= current_timestamp::timestamp without time zone)
            or
            (site_r1.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '7 day')
            and site_r1.day <= current_timestamp::timestamp without time zone)
          WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
         ) page;
            """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_last_14_days"),

        migrations.RunSQL("""
    insert into ui_usual_campaigns_grid_data_last_14_days as ut (
        campaign_id,
        imps,
        clicks,
        spent,
        conversions,
        imps_viewed,
        view_measured_imps,
        cpm,
        cvr,
        ctr,
        cpc,
        view_measurement_rate,
        view_rate,
        day_chart)
      select
        page.campaign_id,
        page.imps,
        page.clicks,
        page.spent,
        page.conversions,
        page.imps_viewed,
        page.view_measured_imps,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
        array_to_json(array((select
               json_build_object(
               'day', site_r.day,
               'imp', SUM(site_r.imps),
               'spend', SUM(site_r.media_cost),
               'clicks', SUM(site_r.clicks),
               'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
               'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
               'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
               'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
             from site_domain_performance_report site_r
             where site_r.campaign_id=page.campaign_id
               and (
               (site_r.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '14 day')
               and site_r.hour <= current_timestamp::timestamp without time zone)
               or (
               site_r.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '14 day')
               and site_r.day <= current_timestamp::timestamp without time zone))
             group by site_r.campaign_id, site_r.day
             order by site_r.day))) id
    from (
          select distinct on (site_r1.campaign_id)
            site_r1.campaign_id,
            SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
            SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
            SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
            (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
            SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
            SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
          from
            site_domain_performance_report site_r1
          where
            (site_r1.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '14 day')
            and site_r1.hour <= current_timestamp::timestamp without time zone)
            or
            (site_r1.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '14 day')
            and site_r1.day <= current_timestamp::timestamp without time zone)
          WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
         ) page;
            """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_last_21_days"),

        migrations.RunSQL("""
    insert into ui_usual_campaigns_grid_data_last_21_days as ut (
        campaign_id,
        imps,
        clicks,
        spent,
        conversions,
        imps_viewed,
        view_measured_imps,
        cpm,
        cvr,
        ctr,
        cpc,
        view_measurement_rate,
        view_rate,
        day_chart)
      select
        page.campaign_id,
        page.imps,
        page.clicks,
        page.spent,
        page.conversions,
        page.imps_viewed,
        page.view_measured_imps,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
        array_to_json(array((select
               json_build_object(
               'day', site_r.day,
               'imp', SUM(site_r.imps),
               'spend', SUM(site_r.media_cost),
               'clicks', SUM(site_r.clicks),
               'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
               'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
               'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
               'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
             from site_domain_performance_report site_r
             where site_r.campaign_id=page.campaign_id
               and (
               (site_r.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '21 day')
               and site_r.hour <= current_timestamp::timestamp without time zone)
               or (
               site_r.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '21 day')
               and site_r.day <= current_timestamp::timestamp without time zone))
             group by site_r.campaign_id, site_r.day
             order by site_r.day))) id
    from (
          select distinct on (site_r1.campaign_id)
            site_r1.campaign_id,
            SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
            SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
            SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
            (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
            SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
            SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
          from
            site_domain_performance_report site_r1
          where
            (site_r1.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '21 day')
            and site_r1.hour <= current_timestamp::timestamp without time zone)
            or
            (site_r1.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '21 day')
            and site_r1.day <= current_timestamp::timestamp without time zone)
          WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
         ) page;
            """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_last_90_days"),

        migrations.RunSQL("""
    insert into ui_usual_campaigns_grid_data_last_90_days as ut (
        campaign_id,
        imps,
        clicks,
        spent,
        conversions,
        imps_viewed,
        view_measured_imps,
        cpm,
        cvr,
        ctr,
        cpc,
        view_measurement_rate,
        view_rate,
        day_chart)
      select
        page.campaign_id,
        page.imps,
        page.clicks,
        page.spent,
        page.conversions,
        page.imps_viewed,
        page.view_measured_imps,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
        case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
        case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
        array_to_json(array((select
               json_build_object(
               'day', site_r.day,
               'imp', SUM(site_r.imps),
               'spend', SUM(site_r.media_cost),
               'clicks', SUM(site_r.clicks),
               'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
               'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
               'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
               'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
             from site_domain_performance_report site_r
             where site_r.campaign_id=page.campaign_id
               and (
               (site_r.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '90 day')
               and site_r.hour <= current_timestamp::timestamp without time zone)
               or (
               site_r.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '90 day')
               and site_r.day <= current_timestamp::timestamp without time zone))
             group by site_r.campaign_id, site_r.day
             order by site_r.day))) id
    from (
          select distinct on (site_r1.campaign_id)
            site_r1.campaign_id,
            SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
            SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
            SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
            (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
            SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
            SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
          from
            site_domain_performance_report site_r1
          where
            (site_r1.hour >= date_trunc('day',current_timestamp::timestamp without time zone - interval '90 day')
            and site_r1.hour <= current_timestamp::timestamp without time zone)
            or
            (site_r1.day >= date_trunc('day',current_timestamp::timestamp without time zone - interval '90 day')
            and site_r1.day <= current_timestamp::timestamp without time zone)
          WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
         ) page;
            """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_last_month"),

        migrations.RunSQL("""
        insert into ui_usual_campaigns_grid_data_last_month as ut (
            campaign_id,
            imps,
            clicks,
            spent,
            conversions,
            imps_viewed,
            view_measured_imps,
            cpm,
            cvr,
            ctr,
            cpc,
            view_measurement_rate,
            view_rate,
            day_chart)
          select
            page.campaign_id,
            page.imps,
            page.clicks,
            page.spent,
            page.conversions,
            page.imps_viewed,
            page.view_measured_imps,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
            case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
            case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
            array_to_json(array((select
                   json_build_object(
                   'day', site_r.day,
                   'imp', SUM(site_r.imps),
                   'spend', SUM(site_r.media_cost),
                   'clicks', SUM(site_r.clicks),
                   'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
                   'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
                   'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
                   'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
                 from site_domain_performance_report site_r
                 where site_r.campaign_id=page.campaign_id
                   and (
                   (site_r.hour >= date_trunc('month',current_timestamp::timestamp without time zone - interval '1 month')
                   and site_r.hour < date_trunc('month',current_timestamp::timestamp without time zone))
                   or (
                   site_r.day >= date_trunc('month',current_timestamp::timestamp without time zone - interval '1 month')
                   and site_r.day < date_trunc('month',current_timestamp::timestamp without time zone)))
                 group by site_r.campaign_id, site_r.day
                 order by site_r.day))) id
        from (
              select distinct on (site_r1.campaign_id)
                site_r1.campaign_id,
                SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
                SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
                SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
                (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
                SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
                SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
              from
                site_domain_performance_report site_r1
              where
                (site_r1.hour >= date_trunc('month',current_timestamp::timestamp without time zone - interval '1 month')
                and site_r1.hour < date_trunc('month',current_timestamp::timestamp without time zone))
                or
                (site_r1.day >= date_trunc('month',current_timestamp::timestamp without time zone - interval '1 month')
                and site_r1.day < date_trunc('month',current_timestamp::timestamp without time zone))
              WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
             ) page;
                """),

        migrations.RunSQL("delete from ui_usual_campaigns_grid_data_cur_month"),

        migrations.RunSQL("""
        insert into ui_usual_campaigns_grid_data_cur_month as ut (
            campaign_id,
            imps,
            clicks,
            spent,
            conversions,
            imps_viewed,
            view_measured_imps,
            cpm,
            cvr,
            ctr,
            cpc,
            view_measurement_rate,
            view_rate,
            day_chart)
          select
            page.campaign_id,
            page.imps,
            page.clicks,
            page.spent,
            page.conversions,
            page.imps_viewed,
            page.view_measured_imps,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.imps, 0) * 1000.0 end,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.conversions, 0)::float / coalesce(page.imps, 0) end,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.clicks, 0)::float / coalesce(page.imps, 0) end,
            case coalesce(page.clicks, 0) when 0 then 0 else coalesce(page.spent, 0) / coalesce(page.clicks, 0) end,
            case coalesce(page.imps, 0) when 0 then 0 else coalesce(page.view_measured_imps, 0)::float / coalesce(page.imps, 0) end,
            case coalesce(page.view_measured_imps, 0) when 0 then 0 else coalesce(page.imps_viewed, 0)::float / coalesce(page.view_measured_imps, 0) end,
            array_to_json(array((select
                   json_build_object(
                   'day', site_r.day,
                   'imp', SUM(site_r.imps),
                   'spend', SUM(site_r.media_cost),
                   'clicks', SUM(site_r.clicks),
                   'conversions', SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs),
                   'cvr', case SUM(site_r.imps) when 0 then 0 else (SUM(site_r.post_click_convs) + SUM(site_r.post_view_convs))::float/SUM(site_r.imps) end,
                   'cpc', case SUM(site_r.clicks) when 0 then 0 else SUM(site_r.media_cost)::float/SUM(site_r.clicks) end,
                   'ctr', case SUM(site_r.imps) when 0 then 0 else SUM(site_r.clicks)::float/SUM(site_r.imps) end)
                 from site_domain_performance_report site_r
                 where site_r.campaign_id=page.campaign_id
                   and (
                   (site_r.hour >= date_trunc('month',current_timestamp::timestamp without time zone)
                   and site_r.hour <= current_timestamp::timestamp without time zone)
                   or (
                   site_r.day >= date_trunc('month',current_timestamp::timestamp without time zone)
                   and site_r.day <= current_timestamp::timestamp without time zone))
                 group by site_r.campaign_id, site_r.day
                 order by site_r.day))) id
        from (
              select distinct on (site_r1.campaign_id)
                site_r1.campaign_id,
                SUM(site_r1.imps) over (partition by site_r1.campaign_id) imps,
                SUM(site_r1.media_cost) over (partition by site_r1.campaign_id) spent,
                SUM(site_r1.clicks) over (partition by site_r1.campaign_id) clicks,
                (SUM(site_r1.post_view_convs) over (partition by site_r1.campaign_id) + SUM(site_r1.post_click_convs) over (partition by site_r1.campaign_id)) conversions,
                SUM(site_r1.imps_viewed) over (partition by site_r1.campaign_id) imps_viewed,
                SUM(site_r1.view_measured_imps) over (partition by site_r1.campaign_id) view_measured_imps
              from
                site_domain_performance_report site_r1
              where
                (site_r1.hour >= date_trunc('month',current_timestamp::timestamp without time zone)
                and site_r1.hour <= current_timestamp::timestamp without time zone)
                or
                (site_r1.day >= date_trunc('month',current_timestamp::timestamp without time zone)
                and site_r1.day <= current_timestamp::timestamp without time zone)
              WINDOW w as (partition by site_r1.campaign_id order by site_r1.day desc)
             ) page;
                """),

    ]
